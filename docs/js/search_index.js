var search_data = {"index":{"searchIndex":["adsp","baseerror","file","notenoughdestinationerror","notimplementederror","option","stream","abstract","delegates","raw","abstract","compressor","option","decompressor","option","nativecompressor","nativedecompressor","reader","readerhelpers","classmethods","stat","writer","writerhelpers","classmethods","string","option","unexpectederror","usedaftercloseerror","validateerror","validation","<<()","advise()","append_io_data()","close()","close()","close()","close()","close()","close()","close()","close()","close_nonblock()","closed?()","closed?()","compress()","compress()","create_raw_stream()","create_raw_stream()","create_raw_stream()","decompress()","decompress()","do_not_use_after_close()","each()","each_byte()","each_char()","each_line()","each_string()","empty?()","eof?()","finish()","finish()","finish_nonblock()","flush()","flush()","flush()","flush()","flush()","flush_io_data()","flush_nonblock()","get_compressor_options()","get_compressor_options()","get_compressor_options()","get_compressor_options()","get_decompressor_options()","get_decompressor_options()","get_decompressor_options()","get_decompressor_options()","getbyte()","getc()","gets()","included()","included()","included()","initialize_source_buffer_length()","more_destination()","native_compress_io()","native_compress_string()","native_decompress_io()","native_decompress_string()","new()","new()","new()","new()","new()","new()","new()","new()","new()","open()","open()","print()","printf()","process_set_encoding_arguments()","putc()","puts()","raw_nonblock_wrapper()","raw_wrapper()","raw_wrapper()","read()","read()","read()","read_buffer()","read_bytes_from_buffer()","read_more_nonblock()","read_nonblock()","read_result()","read_result()","readbyte()","readchar()","readline()","readlines()","readpartial()","readstring()","reset_buffer()","reset_io_advise()","reset_io_remainder()","reset_need_to_flush()","rewind()","rewind()","rewind()","rewind_nonblock()","set_encoding()","set_target_encoding()","target_encoding()","to_io()","transcode()","transcode_to_external()","transcode_to_internal()","ungetbyte()","ungetc()","ungetline()","ungetstring()","validate_array()","validate_hash()","validate_not_negative_integer()","validate_positive_integer()","validate_proc()","validate_string()","validate_symbol()","validate_write()","validate_write_nonblock()","write()","write()","write()","write_nonblock()","write_remaining_buffer()","write_remaining_buffer_nonblock()","write_result()","authors","license"],"longSearchIndex":["adsp","adsp::baseerror","adsp::file","adsp::notenoughdestinationerror","adsp::notimplementederror","adsp::option","adsp::stream","adsp::stream::abstract","adsp::stream::delegates","adsp::stream::raw","adsp::stream::raw::abstract","adsp::stream::raw::compressor","adsp::stream::raw::compressor::option","adsp::stream::raw::decompressor","adsp::stream::raw::decompressor::option","adsp::stream::raw::nativecompressor","adsp::stream::raw::nativedecompressor","adsp::stream::reader","adsp::stream::readerhelpers","adsp::stream::readerhelpers::classmethods","adsp::stream::stat","adsp::stream::writer","adsp::stream::writerhelpers","adsp::stream::writerhelpers::classmethods","adsp::string","adsp::string::option","adsp::unexpectederror","adsp::usedaftercloseerror","adsp::validateerror","adsp::validation","adsp::stream::writerhelpers#<<()","adsp::stream::abstract#advise()","adsp::stream::reader#append_io_data()","adsp::stream::abstract#close()","adsp::stream::raw::abstract#close()","adsp::stream::raw::compressor#close()","adsp::stream::raw::decompressor#close()","adsp::stream::raw::nativecompressor#close()","adsp::stream::raw::nativedecompressor#close()","adsp::stream::reader#close()","adsp::stream::writer#close()","adsp::stream::writer#close_nonblock()","adsp::stream::abstract#closed?()","adsp::stream::raw::abstract#closed?()","adsp::file::compress()","adsp::string::compress()","adsp::stream::abstract#create_raw_stream()","adsp::stream::reader#create_raw_stream()","adsp::stream::writer#create_raw_stream()","adsp::file::decompress()","adsp::string::decompress()","adsp::stream::raw::abstract#do_not_use_after_close()","adsp::stream::readerhelpers#each()","adsp::stream::readerhelpers#each_byte()","adsp::stream::readerhelpers#each_char()","adsp::stream::readerhelpers#each_line()","adsp::stream::readerhelpers#each_string()","adsp::stream::reader#empty?()","adsp::stream::reader#eof?()","adsp::stream::raw::nativecompressor#finish()","adsp::stream::writer#finish()","adsp::stream::writer#finish_nonblock()","adsp::stream::raw::abstract#flush()","adsp::stream::raw::compressor#flush()","adsp::stream::raw::decompressor#flush()","adsp::stream::raw::nativecompressor#flush()","adsp::stream::writer#flush()","adsp::stream::reader#flush_io_data()","adsp::stream::writer#flush_nonblock()","adsp::option::get_compressor_options()","adsp::option::get_compressor_options()","adsp::option::get_compressor_options()","adsp::option::get_compressor_options()","adsp::option::get_decompressor_options()","adsp::option::get_decompressor_options()","adsp::option::get_decompressor_options()","adsp::option::get_decompressor_options()","adsp::stream::readerhelpers#getbyte()","adsp::stream::readerhelpers#getc()","adsp::stream::readerhelpers#gets()","adsp::stream::delegates::included()","adsp::stream::readerhelpers::included()","adsp::stream::writerhelpers::included()","adsp::stream::reader#initialize_source_buffer_length()","adsp::stream::raw::abstract#more_destination()","adsp::file::native_compress_io()","adsp::string::native_compress_string()","adsp::file::native_decompress_io()","adsp::string::native_decompress_string()","adsp::stream::abstract::new()","adsp::stream::raw::abstract::new()","adsp::stream::raw::compressor::new()","adsp::stream::raw::decompressor::new()","adsp::stream::raw::nativecompressor::new()","adsp::stream::raw::nativedecompressor::new()","adsp::stream::reader::new()","adsp::stream::stat::new()","adsp::stream::writer::new()","adsp::stream::readerhelpers::classmethods#open()","adsp::stream::writerhelpers::classmethods#open()","adsp::stream::writerhelpers#print()","adsp::stream::writerhelpers#printf()","adsp::stream::abstract#process_set_encoding_arguments()","adsp::stream::writerhelpers#putc()","adsp::stream::writerhelpers#puts()","adsp::stream::writer#raw_nonblock_wrapper()","adsp::stream::reader#raw_wrapper()","adsp::stream::writer#raw_wrapper()","adsp::stream::raw::decompressor#read()","adsp::stream::raw::nativedecompressor#read()","adsp::stream::reader#read()","adsp::stream::reader#read_buffer()","adsp::stream::reader#read_bytes_from_buffer()","adsp::stream::reader#read_more_nonblock()","adsp::stream::reader#read_nonblock()","adsp::stream::raw::nativecompressor#read_result()","adsp::stream::raw::nativedecompressor#read_result()","adsp::stream::readerhelpers#readbyte()","adsp::stream::readerhelpers#readchar()","adsp::stream::readerhelpers#readline()","adsp::stream::readerhelpers#readlines()","adsp::stream::reader#readpartial()","adsp::stream::readerhelpers#readstring()","adsp::stream::abstract#reset_buffer()","adsp::stream::abstract#reset_io_advise()","adsp::stream::reader#reset_io_remainder()","adsp::stream::reader#reset_need_to_flush()","adsp::stream::abstract#rewind()","adsp::stream::reader#rewind()","adsp::stream::writer#rewind()","adsp::stream::writer#rewind_nonblock()","adsp::stream::abstract#set_encoding()","adsp::stream::abstract#set_target_encoding()","adsp::stream::abstract#target_encoding()","adsp::stream::abstract#to_io()","adsp::stream::writer#transcode()","adsp::stream::reader#transcode_to_external()","adsp::stream::reader#transcode_to_internal()","adsp::stream::readerhelpers#ungetbyte()","adsp::stream::readerhelpers#ungetc()","adsp::stream::readerhelpers#ungetline()","adsp::stream::readerhelpers#ungetstring()","adsp::validation::validate_array()","adsp::validation::validate_hash()","adsp::validation::validate_not_negative_integer()","adsp::validation::validate_positive_integer()","adsp::validation::validate_proc()","adsp::validation::validate_string()","adsp::validation::validate_symbol()","adsp::stream::writer#validate_write()","adsp::stream::writer#validate_write_nonblock()","adsp::stream::raw::compressor#write()","adsp::stream::raw::nativecompressor#write()","adsp::stream::writer#write()","adsp::stream::writer#write_nonblock()","adsp::stream::writer#write_remaining_buffer()","adsp::stream::writer#write_remaining_buffer_nonblock()","adsp::stream::raw::abstract#write_result()","",""],"info":[["ADSP","","ADSP.html","","<p>Abstract data stream processor. Copyright © 2021 AUTHORS, MIT License.\n<p>Abstract data stream processor. …\n"],["ADSP::BaseError","","ADSP/BaseError.html","",""],["ADSP::File","","ADSP/File.html","","<p>ADSP::File class.\n"],["ADSP::NotEnoughDestinationError","","ADSP/NotEnoughDestinationError.html","",""],["ADSP::NotImplementedError","","ADSP/NotImplementedError.html","",""],["ADSP::Option","","ADSP/Option.html","","<p>ADSP::Option class.\n"],["ADSP::Stream","","ADSP/Stream.html","",""],["ADSP::Stream::Abstract","","ADSP/Stream/Abstract.html","","<p>ADSP::Stream::Abstract class.\n"],["ADSP::Stream::Delegates","","ADSP/Stream/Delegates.html","","<p>ADSP::Stream::Delegates class.\n"],["ADSP::Stream::Raw","","ADSP/Stream/Raw.html","",""],["ADSP::Stream::Raw::Abstract","","ADSP/Stream/Raw/Abstract.html","","<p>ADSP::Stream::Raw::Abstract class.\n"],["ADSP::Stream::Raw::Compressor","","ADSP/Stream/Raw/Compressor.html","","<p>ADSP::Stream::Raw::Compressor class.\n"],["ADSP::Stream::Raw::Compressor::Option","","ADSP/Option.html","","<p>ADSP::Option class.\n"],["ADSP::Stream::Raw::Decompressor","","ADSP/Stream/Raw/Decompressor.html","","<p>ADSP::Stream::Raw::Decompressor class.\n"],["ADSP::Stream::Raw::Decompressor::Option","","ADSP/Option.html","","<p>ADSP::Option class.\n"],["ADSP::Stream::Raw::NativeCompressor","","ADSP/Stream/Raw/NativeCompressor.html","","<p>ADSP::Stream::Raw::NativeCompressor class.\n"],["ADSP::Stream::Raw::NativeDecompressor","","ADSP/Stream/Raw/NativeDecompressor.html","","<p>ADSP::Stream::Raw::NativeDecompressor class.\n"],["ADSP::Stream::Reader","","ADSP/Stream/Reader.html","","<p>ADSP::Stream::Reader class.\n"],["ADSP::Stream::ReaderHelpers","","ADSP/Stream/ReaderHelpers.html","","<p>ADSP::Stream::ReaderHelpers module.\n"],["ADSP::Stream::ReaderHelpers::ClassMethods","","ADSP/Stream/ReaderHelpers/ClassMethods.html","","<p>Additional class methods for reader.\n"],["ADSP::Stream::Stat","","ADSP/Stream/Stat.html","","<p>ADSP::Stream::Stat class.\n"],["ADSP::Stream::Writer","","ADSP/Stream/Writer.html","","<p>ADSP::Stream::Writer class.\n"],["ADSP::Stream::WriterHelpers","","ADSP/Stream/WriterHelpers.html","","<p>ADSP::Stream::WriterHelpers module.\n"],["ADSP::Stream::WriterHelpers::ClassMethods","","ADSP/Stream/WriterHelpers/ClassMethods.html","","<p>Additional class methods for writer.\n"],["ADSP::String","","ADSP/String.html","","<p>ADSP::String class.\n"],["ADSP::String::Option","","ADSP/Option.html","","<p>ADSP::Option class.\n"],["ADSP::UnexpectedError","","ADSP/UnexpectedError.html","",""],["ADSP::UsedAfterCloseError","","ADSP/UsedAfterCloseError.html","",""],["ADSP::ValidateError","","ADSP/ValidateError.html","",""],["ADSP::Validation","","ADSP/Validation.html","","<p>ADSP::Validation class.\n"],["<<","ADSP::Stream::WriterHelpers","ADSP/Stream/WriterHelpers.html#method-i-3C-3C","(object)","<p>Writes <code>object</code> to stream.\n"],["advise","ADSP::Stream::Abstract","ADSP/Stream/Abstract.html#method-i-advise","()","<p>Sets access mode for native stream, noop.\n"],["append_io_data","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-i-append_io_data","(io_data)","<p>Appends <code>io_data</code> from native stream to internal storage.\n"],["close","ADSP::Stream::Abstract","ADSP/Stream/Abstract.html#method-i-close","()","<p>Closes stream.\n"],["close","ADSP::Stream::Raw::Abstract","ADSP/Stream/Raw/Abstract.html#method-i-close","(&writer)","<p>Writes next result using <code>writer</code> proc and closes raw stream.\n"],["close","ADSP::Stream::Raw::Compressor","ADSP/Stream/Raw/Compressor.html#method-i-close","(&writer)","<p>Finishes compressor, writes result using <code>writer</code> proc and closes compressor. Raises <code>UsedAfterCloseError</code> …\n"],["close","ADSP::Stream::Raw::Decompressor","ADSP/Stream/Raw/Decompressor.html#method-i-close","(&writer)","<p>Writes result using <code>writer</code> proc and closes decompressor. Raises <code>UsedAfterCloseError</code> when used after close. …\n"],["close","ADSP::Stream::Raw::NativeCompressor","ADSP/Stream/Raw/NativeCompressor.html#method-i-close","()","<p>Closes compressor and cleans up internal resources. Raises <code>UsedAfterCloseError</code> when used after close. …\n"],["close","ADSP::Stream::Raw::NativeDecompressor","ADSP/Stream/Raw/NativeDecompressor.html#method-i-close","()","<p>Closes decompressor and cleans up internal resources. Raises <code>UsedAfterCloseError</code> when used after close. …\n"],["close","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-i-close","()","<p>Closes stream.\n"],["close","ADSP::Stream::Writer","ADSP/Stream/Writer.html#method-i-close","()","<p>Closes stream.\n"],["close_nonblock","ADSP::Stream::Writer","ADSP/Stream/Writer.html#method-i-close_nonblock","(*options)","<p>Closes stream nonblock. <code>options</code> will be passed to native stream.\n"],["closed?","ADSP::Stream::Abstract","ADSP/Stream/Abstract.html#method-i-closed-3F","()","<p>Returns whether stream is closed.\n"],["closed?","ADSP::Stream::Raw::Abstract","ADSP/Stream/Raw/Abstract.html#method-i-closed-3F","()","<p>Returns whether raw stream is closed.\n"],["compress","ADSP::File","ADSP/File.html#method-c-compress","(source, destination, options = {})","<p>Compresses data from <code>source</code> file path to <code>destination</code> file path. Option: <code>:source_buffer_length</code> source …\n"],["compress","ADSP::String","ADSP/String.html#method-c-compress","(source, options = {})","<p>Compresses <code>source</code> string using <code>options</code>. Option: <code>:destination_buffer_length</code> destination buffer length. …\n"],["create_raw_stream","ADSP::Stream::Abstract","ADSP/Stream/Abstract.html#method-i-create_raw_stream","()","<p>Creates raw stream.\n"],["create_raw_stream","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-i-create_raw_stream","()","<p>Creates raw stream.\n"],["create_raw_stream","ADSP::Stream::Writer","ADSP/Stream/Writer.html#method-i-create_raw_stream","()","<p>Creates raw stream.\n"],["decompress","ADSP::File","ADSP/File.html#method-c-decompress","(source, destination, options = {})","<p>Decompresses data from <code>source</code> file path to <code>destination</code> file path. Option: <code>:source_buffer_length</code> source …\n"],["decompress","ADSP::String","ADSP/String.html#method-c-decompress","(source, options = {})","<p>Decompresses <code>source</code> string using <code>options</code>. Option: <code>:destination_buffer_length</code> destination buffer length. …\n"],["do_not_use_after_close","ADSP::Stream::Raw::Abstract","ADSP/Stream/Raw/Abstract.html#method-i-do_not_use_after_close","()","<p>Raises error when raw stream is closed.\n"],["each","ADSP::Stream::ReaderHelpers","ADSP/Stream/ReaderHelpers.html#method-i-each","(&block)",""],["each_byte","ADSP::Stream::ReaderHelpers","ADSP/Stream/ReaderHelpers.html#method-i-each_byte","(&block)","<p>Yields each byte.\n"],["each_char","ADSP::Stream::ReaderHelpers","ADSP/Stream/ReaderHelpers.html#method-i-each_char","(&block)","<p>Yields each char.\n"],["each_line","ADSP::Stream::ReaderHelpers","ADSP/Stream/ReaderHelpers.html#method-i-each_line","(&block)","<p>Yields each line.\n"],["each_string","ADSP::Stream::ReaderHelpers","ADSP/Stream/ReaderHelpers.html#method-i-each_string","(each_proc, &block)","<p>Yields each string by <code>each_proc</code>.\n"],["empty?","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-i-empty-3F","()","<p>Returns whether stream is empty.\n"],["eof?","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-i-eof-3F","()","<p>Returns whether we are at the end of stream.\n"],["finish","ADSP::Stream::Raw::NativeCompressor","ADSP/Stream/Raw/NativeCompressor.html#method-i-finish","()","<p>Finishes compressor and prepares result for <code>read_result</code>. Returns boolean that can be named as “need …\n"],["finish","ADSP::Stream::Writer","ADSP/Stream/Writer.html#method-i-finish","(method_name)","<p>Finishes stream using <code>method_name</code>.\n"],["finish_nonblock","ADSP::Stream::Writer","ADSP/Stream/Writer.html#method-i-finish_nonblock","(method_name, *options)","<p>Finishes stream using <code>method_name</code> nonblock. <code>options</code> will be passed to native stream.\n"],["flush","ADSP::Stream::Raw::Abstract","ADSP/Stream/Raw/Abstract.html#method-i-flush","(&writer)","<p>Flushes raw stream and writes next result using <code>writer</code> proc.\n"],["flush","ADSP::Stream::Raw::Compressor","ADSP/Stream/Raw/Compressor.html#method-i-flush","(&writer)","<p>Flushes compressor, writes result using <code>writer</code> proc and closes compressor.\n"],["flush","ADSP::Stream::Raw::Decompressor","ADSP/Stream/Raw/Decompressor.html#method-i-flush","(&writer)","<p>Flushes decompressor, writes result using <code>writer</code> proc and closes decompressor.\n"],["flush","ADSP::Stream::Raw::NativeCompressor","ADSP/Stream/Raw/NativeCompressor.html#method-i-flush","()","<p>Flushes internal buffers and prepares result for <code>read_result</code>. Returns boolean that can be named as “need …\n"],["flush","ADSP::Stream::Writer","ADSP/Stream/Writer.html#method-i-flush","()","<p>Flushes stream.\n"],["flush_io_data","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-i-flush_io_data","()","<p>Triggers flush method for native stream.\n"],["flush_nonblock","ADSP::Stream::Writer","ADSP/Stream/Writer.html#method-i-flush_nonblock","(*options)","<p>Flushes stream nonblock. <code>options</code> will be passed to native stream.\n"],["get_compressor_options","ADSP::Option","ADSP/Option.html#method-c-get_compressor_options","(options, buffer_length_names = [])","<p>Validates and processes default values for compressor <code>options</code>. <code>buffer_length_names</code> is an array of buffer …\n"],["get_compressor_options","ADSP::Option","ADSP/Option.html#method-c-get_compressor_options","(options, buffer_length_names = [])","<p>Validates and processes default values for compressor <code>options</code>. <code>buffer_length_names</code> is an array of buffer …\n"],["get_compressor_options","ADSP::Option","ADSP/Option.html#method-c-get_compressor_options","(options, buffer_length_names = [])","<p>Validates and processes default values for compressor <code>options</code>. <code>buffer_length_names</code> is an array of buffer …\n"],["get_compressor_options","ADSP::Option","ADSP/Option.html#method-c-get_compressor_options","(options, buffer_length_names = [])","<p>Validates and processes default values for compressor <code>options</code>. <code>buffer_length_names</code> is an array of buffer …\n"],["get_decompressor_options","ADSP::Option","ADSP/Option.html#method-c-get_decompressor_options","(options, buffer_length_names = [])","<p>Validates and processes default values for decompressor <code>options</code>. <code>buffer_length_names</code> is an array of buffer …\n"],["get_decompressor_options","ADSP::Option","ADSP/Option.html#method-c-get_decompressor_options","(options, buffer_length_names = [])","<p>Validates and processes default values for decompressor <code>options</code>. <code>buffer_length_names</code> is an array of buffer …\n"],["get_decompressor_options","ADSP::Option","ADSP/Option.html#method-c-get_decompressor_options","(options, buffer_length_names = [])","<p>Validates and processes default values for decompressor <code>options</code>. <code>buffer_length_names</code> is an array of buffer …\n"],["get_decompressor_options","ADSP::Option","ADSP/Option.html#method-c-get_decompressor_options","(options, buffer_length_names = [])","<p>Validates and processes default values for decompressor <code>options</code>. <code>buffer_length_names</code> is an array of buffer …\n"],["getbyte","ADSP::Stream::ReaderHelpers","ADSP/Stream/ReaderHelpers.html#method-i-getbyte","()","<p>Returns next byte.\n"],["getc","ADSP::Stream::ReaderHelpers","ADSP/Stream/ReaderHelpers.html#method-i-getc","()","<p>Returns next char.\n"],["gets","ADSP::Stream::ReaderHelpers","ADSP/Stream/ReaderHelpers.html#method-i-gets","(separator = $OUTPUT_RECORD_SEPARATOR, limit = nil)","<p>Returns next line by <code>separator</code>. Line length is limited by <code>limit</code>.\n"],["included","ADSP::Stream::Delegates","ADSP/Stream/Delegates.html#method-c-included","(klass)","<p>Defines delegates for native stream after module included.\n"],["included","ADSP::Stream::ReaderHelpers","ADSP/Stream/ReaderHelpers.html#method-c-included","(klass)","<p>Extends target <code>klass</code> with additional class methods.\n"],["included","ADSP::Stream::WriterHelpers","ADSP/Stream/WriterHelpers.html#method-c-included","(klass)","<p>Extends target <code>klass</code> with additional class methods.\n"],["initialize_source_buffer_length","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-i-initialize_source_buffer_length","()","<p>Initializes source buffer length.\n"],["more_destination","ADSP::Stream::Raw::Abstract","ADSP/Stream/Raw/Abstract.html#method-i-more_destination","(&writer)","<p>Writes next result using <code>writer</code> proc and frees destination buffer.\n"],["native_compress_io","ADSP::File","ADSP/File.html#method-c-native_compress_io","(source_io, destination_io, options)","<p>Internal method for compressing data from <code>source_io</code> file to <code>destination_io</code> file.\n"],["native_compress_string","ADSP::String","ADSP/String.html#method-c-native_compress_string","(source, options)","<p>Internal method for compressing <code>source</code> string using <code>options</code>.\n"],["native_decompress_io","ADSP::File","ADSP/File.html#method-c-native_decompress_io","(source_io, destination_io, options)","<p>Internal method for decompressing data from <code>source_io</code> file to <code>destination_io</code> file.\n"],["native_decompress_string","ADSP::String","ADSP/String.html#method-c-native_decompress_string","(source, options)","<p>Internal method for decompressing <code>source</code> string using <code>options</code>.\n"],["new","ADSP::Stream::Abstract","ADSP/Stream/Abstract.html#method-c-new","(io, options = {})","<p>Initializes stream using <code>io</code> native stream and <code>options</code>. Option: <code>:external_encoding</code> encoding name for destination …\n"],["new","ADSP::Stream::Raw::Abstract","ADSP/Stream/Raw/Abstract.html#method-c-new","(native_stream)","<p>Initializes raw stream using <code>native_stream</code>.\n"],["new","ADSP::Stream::Raw::Compressor","ADSP/Stream/Raw/Compressor.html#method-c-new","(options = {})","<p>Initializes compressor. Option: <code>:destination_buffer_length</code> destination buffer length.\n"],["new","ADSP::Stream::Raw::Decompressor","ADSP/Stream/Raw/Decompressor.html#method-c-new","(options = {})","<p>Initializes decompressor. Option: <code>:destination_buffer_length</code> destination buffer length.\n"],["new","ADSP::Stream::Raw::NativeCompressor","ADSP/Stream/Raw/NativeCompressor.html#method-c-new","(options)","<p>Initializes native compressor. Option: <code>:destination_buffer_length</code> destination buffer length.\n"],["new","ADSP::Stream::Raw::NativeDecompressor","ADSP/Stream/Raw/NativeDecompressor.html#method-c-new","(options)","<p>Initializes native decompressor. Option: <code>:destination_buffer_length</code> destination buffer length.\n"],["new","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-c-new","(source_io, options = {}, *args)","<p>Initializes stream using <code>source_io</code> native stream and <code>options</code>. Option: <code>:external_encoding</code> encoding name …\n"],["new","ADSP::Stream::Stat","ADSP/Stream/Stat.html#method-c-new","(stat)","<p>Initializes status info based on native stream <code>stat</code>.\n"],["new","ADSP::Stream::Writer","ADSP/Stream/Writer.html#method-c-new","(destination_io, options = {}, *args)","<p>Initializes stream using <code>destination_io</code> native stream and <code>options</code>. Option: <code>:external_encoding</code> encoding …\n"],["open","ADSP::Stream::ReaderHelpers::ClassMethods","ADSP/Stream/ReaderHelpers/ClassMethods.html#method-i-open","(file_path, *args, &block)","<p>Opens <code>file_path</code> in binary mode, creates reader and yields it.\n"],["open","ADSP::Stream::WriterHelpers::ClassMethods","ADSP/Stream/WriterHelpers/ClassMethods.html#method-i-open","(file_path, *args, &block)","<p>Opens <code>file_path</code> in binary mode, creates writer and yields it.\n"],["print","ADSP::Stream::WriterHelpers","ADSP/Stream/WriterHelpers.html#method-i-print","(*objects, field_separator: $OUTPUT_FIELD_SEPARATOR, record_separator: $OUTPUT_RECORD_SEPARATOR)","<p>Writes <code>objects</code> to stream. Uses <code>field_separator</code> for each object. Uses <code>record_separator</code> for group of objects. …\n"],["printf","ADSP::Stream::WriterHelpers","ADSP/Stream/WriterHelpers.html#method-i-printf","(*args)","<p>Formats each argument and writes to stream.\n"],["process_set_encoding_arguments","ADSP::Stream::Abstract","ADSP/Stream/Abstract.html#method-i-process_set_encoding_arguments","(*args)","<p>Processes encoding for source and destination data. First argument: <code>:external_encoding</code> encoding name …\n"],["putc","ADSP::Stream::WriterHelpers","ADSP/Stream/WriterHelpers.html#method-i-putc","(object, encoding: ::Encoding::BINARY)","<p>Writes first char of <code>object</code> to stream. Numeric object uses <code>encoding</code> for providing first char.\n"],["puts","ADSP::Stream::WriterHelpers","ADSP/Stream/WriterHelpers.html#method-i-puts","(*objects)","<p>Writes <code>objects</code> to stream.\n"],["raw_nonblock_wrapper","ADSP::Stream::Writer","ADSP/Stream/Writer.html#method-i-raw_nonblock_wrapper","(method_name, *args)","<p>Wraps nonblock <code>method_name</code> for raw stream.\n"],["raw_wrapper","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-i-raw_wrapper","(method_name, *args)","<p>Wraps <code>method_name</code> for raw stream.\n"],["raw_wrapper","ADSP::Stream::Writer","ADSP/Stream/Writer.html#method-i-raw_wrapper","(method_name, *args)","<p>Wraps <code>method_name</code> for raw stream.\n"],["read","ADSP::Stream::Raw::Decompressor","ADSP/Stream/Raw/Decompressor.html#method-i-read","(source, &writer)","<p>Reads <code>source</code> string, writes result using <code>writer</code> proc. Returns amount of bytes read from <code>source</code>.\n"],["read","ADSP::Stream::Raw::NativeDecompressor","ADSP/Stream/Raw/NativeDecompressor.html#method-i-read","(source)","<p>Reads part of <code>source</code> string. Returns array of 2 values:\n<p>number of bytes read from <code>source</code>.\n<p>boolean that …\n"],["read","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-i-read","(bytes_to_read = nil, out_buffer = nil)","<p>Reads <code>bytes_to_read</code> bytes from stream. If <code>out_buffer</code> is defined than it will be used as output destination. …\n"],["read_buffer","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-i-read_buffer","(out_buffer)","<p>Reads data from buffer. If <code>out_buffer</code> is defined than it will be used as output destination.\n"],["read_bytes_from_buffer","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-i-read_bytes_from_buffer","(bytes_to_read, out_buffer)","<p>Reads <code>bytes_to_read</code> bytes from buffer. If <code>out_buffer</code> is defined than it will be used as output destination. …\n"],["read_more_nonblock","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-i-read_more_nonblock","(bytes_to_read, out_buffer, &_block)","<p>Reads <code>bytes_to_read</code> bytes from stream. If <code>out_buffer</code> is defined than it will be used as output destination. …\n"],["read_nonblock","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-i-read_nonblock","(bytes_to_read, out_buffer = nil, *options)","<p>Reads <code>bytes_to_read</code> bytes from stream. If <code>out_buffer</code> is defined than it will be used as output destination. …\n"],["read_result","ADSP::Stream::Raw::NativeCompressor","ADSP/Stream/Raw/NativeCompressor.html#method-i-read_result","()","<p>Provides next part of unread result. Returns empty string if there is no unread result.\n"],["read_result","ADSP::Stream::Raw::NativeDecompressor","ADSP/Stream/Raw/NativeDecompressor.html#method-i-read_result","()","<p>Provides next part of unread result. Returns empty string if there is no unread result.\n"],["readbyte","ADSP::Stream::ReaderHelpers","ADSP/Stream/ReaderHelpers.html#method-i-readbyte","()","<p>Returns next byte. Raises <code>::EOFError</code> when no data available.\n"],["readchar","ADSP::Stream::ReaderHelpers","ADSP/Stream/ReaderHelpers.html#method-i-readchar","()","<p>Returns next char. Raises <code>::EOFError</code> when no data available.\n"],["readline","ADSP::Stream::ReaderHelpers","ADSP/Stream/ReaderHelpers.html#method-i-readline","()","<p>Returns next line. Raises <code>::EOFError</code> when no data available.\n"],["readlines","ADSP::Stream::ReaderHelpers","ADSP/Stream/ReaderHelpers.html#method-i-readlines","()","<p>Returns all available lines.\n"],["readpartial","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-i-readpartial","(bytes_to_read, out_buffer = nil)","<p>Reads <code>bytes_to_read</code> bytes from stream. If <code>out_buffer</code> is defined than it will be used as output destination. …\n"],["readstring","ADSP::Stream::ReaderHelpers","ADSP/Stream/ReaderHelpers.html#method-i-readstring","(each_proc)","<p>Returns next string by <code>each_proc</code>. Raises <code>::EOFError</code> when no data available.\n"],["reset_buffer","ADSP::Stream::Abstract","ADSP/Stream/Abstract.html#method-i-reset_buffer","()","<p>Resets internal source buffer.\n"],["reset_io_advise","ADSP::Stream::Abstract","ADSP/Stream/Abstract.html#method-i-reset_io_advise","()","<p>Resets native stream advise.\n"],["reset_io_remainder","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-i-reset_io_remainder","()","<p>Resets io remainder.\n"],["reset_need_to_flush","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-i-reset_need_to_flush","()","<p>Resets need to flush flag.\n"],["rewind","ADSP::Stream::Abstract","ADSP/Stream/Abstract.html#method-i-rewind","()","<p>Resets stream and source position. Returns zero (offset for source data).\n"],["rewind","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-i-rewind","()","<p>Resets stream.\n"],["rewind","ADSP::Stream::Writer","ADSP/Stream/Writer.html#method-i-rewind","()","<p>Resets stream.\n"],["rewind_nonblock","ADSP::Stream::Writer","ADSP/Stream/Writer.html#method-i-rewind_nonblock","(*options)","<p>Resets stream nonblock. <code>options</code> will be passed to native stream.\n"],["set_encoding","ADSP::Stream::Abstract","ADSP/Stream/Abstract.html#method-i-set_encoding","(*args)","<p>Sets encoding for source and destination data. First argument: <code>:external_encoding</code> encoding name for destination …\n"],["set_target_encoding","ADSP::Stream::Abstract","ADSP/Stream/Abstract.html#method-i-set_target_encoding","(name, value)","<p>Sets <code>value</code> for encoding <code>name</code>.\n"],["target_encoding","ADSP::Stream::Abstract","ADSP/Stream/Abstract.html#method-i-target_encoding","()","<p>Returns encoding for source data if defined. Returns encoding for destination data if encoding for source …\n"],["to_io","ADSP::Stream::Abstract","ADSP/Stream/Abstract.html#method-i-to_io","()","<p>Returns self object.\n"],["transcode","ADSP::Stream::Writer","ADSP/Stream/Writer.html#method-i-transcode","(data)","<p>Transcodes <code>data</code> to external encoding.\n"],["transcode_to_external","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-i-transcode_to_external","(data)","<p>Transcodes <code>data</code> to external encoding. We should be able to return data back to buffer. We won’t use …\n"],["transcode_to_internal","ADSP::Stream::Reader","ADSP/Stream/Reader.html#method-i-transcode_to_internal","(data)","<p>Transcodes <code>data</code> to internal encoding.\n"],["ungetbyte","ADSP::Stream::ReaderHelpers","ADSP/Stream/ReaderHelpers.html#method-i-ungetbyte","(byte)","<p>Pushes back <code>byte</code>.\n"],["ungetc","ADSP::Stream::ReaderHelpers","ADSP/Stream/ReaderHelpers.html#method-i-ungetc","(char)","<p>Pushes back <code>char</code>.\n"],["ungetline","ADSP::Stream::ReaderHelpers","ADSP/Stream/ReaderHelpers.html#method-i-ungetline","(line)","<p>Pushes back <code>line</code>.\n"],["ungetstring","ADSP::Stream::ReaderHelpers","ADSP/Stream/ReaderHelpers.html#method-i-ungetstring","(string)","<p>Pushes back <code>string</code>.\n"],["validate_array","ADSP::Validation","ADSP/Validation.html#method-c-validate_array","(value)","<p>Raises error when <code>value</code> is not array.\n"],["validate_hash","ADSP::Validation","ADSP/Validation.html#method-c-validate_hash","(value)","<p>Raises error when <code>value</code> is not hash.\n"],["validate_not_negative_integer","ADSP::Validation","ADSP/Validation.html#method-c-validate_not_negative_integer","(value)","<p>Raises error when <code>value</code> is not negative integer.\n"],["validate_positive_integer","ADSP::Validation","ADSP/Validation.html#method-c-validate_positive_integer","(value)","<p>Raises error when <code>value</code> is not positive integer.\n"],["validate_proc","ADSP::Validation","ADSP/Validation.html#method-c-validate_proc","(value)","<p>Raises error when <code>value</code> is not proc.\n"],["validate_string","ADSP::Validation","ADSP/Validation.html#method-c-validate_string","(value)","<p>Raises error when <code>value</code> is not string.\n"],["validate_symbol","ADSP::Validation","ADSP/Validation.html#method-c-validate_symbol","(value)","<p>Raises error when <code>value</code> is not symbol.\n"],["validate_write","ADSP::Stream::Writer","ADSP/Stream/Writer.html#method-i-validate_write","()","<p>Validates native stream responsibility to <code>write</code> method.\n"],["validate_write_nonblock","ADSP::Stream::Writer","ADSP/Stream/Writer.html#method-i-validate_write_nonblock","()","<p>Validates native stream responsibility to <code>write_nonblock</code> method.\n"],["write","ADSP::Stream::Raw::Compressor","ADSP/Stream/Raw/Compressor.html#method-i-write","(source, &writer)","<p>Writes <code>source</code> string, writes result using <code>writer</code> proc. Returns amount of bytes written from <code>source</code>.\n"],["write","ADSP::Stream::Raw::NativeCompressor","ADSP/Stream/Raw/NativeCompressor.html#method-i-write","(source)","<p>Writes part of <code>source</code> string. Returns array of 2 values:\n<p>number of bytes written from <code>source</code>.\n<p>boolean that …\n"],["write","ADSP::Stream::Writer","ADSP/Stream/Writer.html#method-i-write","(*objects)","<p>Writes <code>objects</code> to stream.\n"],["write_nonblock","ADSP::Stream::Writer","ADSP/Stream/Writer.html#method-i-write_nonblock","(object, *options)","<p>Writes <code>object</code> nonblock. <code>options</code> will be passed to native stream. Native stream <code>write_nonblock</code> can raise …\n"],["write_remaining_buffer","ADSP::Stream::Writer","ADSP/Stream/Writer.html#method-i-write_remaining_buffer","()","<p>Writes remaining buffer and resets it.\n"],["write_remaining_buffer_nonblock","ADSP::Stream::Writer","ADSP/Stream/Writer.html#method-i-write_remaining_buffer_nonblock","(*options)","<p>Writes remaining buffer nonblock. <code>options</code> will be passed to native stream.\n"],["write_result","ADSP::Stream::Raw::Abstract","ADSP/Stream/Raw/Abstract.html#method-i-write_result","(&_writer)","<p>Writes next result using block.\n"],["AUTHORS","","AUTHORS.html","","<p>Andrew Aladjev\n"],["LICENSE","","LICENSE.html","","<p>MIT License\n<p>Copyright © 2021 AUTHORS\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"]]}}